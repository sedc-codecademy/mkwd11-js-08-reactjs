import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import axios from "axios";

const COUNTRIES_ALL_URL = "https://restcountries.com/v3.1/all";
const COUNTRIES_NAME_URL = "https://restcountries.com/v3.1/name";

const makeAsyncThunk = (url, actionType) => {
  return createAsyncThunk(actionType, async () => {
    // ex axios.get(url)
  });
};

// const getProducts = makeAsyncThunk("product url");
const getFruits = makeAsyncThunk("fruit url", "fruits/fetchFruits");

const httpCalls = {
  getProducts: makeAsyncThunk(makeAsyncThunk("product url")),
};

export const fetchCountries = createAsyncThunk(
  "countries/fetchCountries",
  async searchValue => {
    if (searchValue) {
      // fetch name country data
      const response = await axios.get(`${COUNTRIES_NAME_URL}/${searchValue}`);
      return response.data;
    } else {
      // fetch all country data
      const response = await axios.get(COUNTRIES_ALL_URL);
      return response.data;
    }
  }
);

export const countriesSlice = createSlice({
  name: "countries",
  initialState: {
    value: [],
    status: "idle",
    error: null,
  },
  reducers: {},
  extraReducers: builder => {
    // All actions that are below are dispatched automatically and therefore they don't need to be exported since we will not be calling them manually and we can't call the manually as they are generated by asyncThunk
    builder
      .addCase(fetchCountries.pending, (state, action) => {
        console.log(action);
        state.status = "loading";
      })
      .addCase(fetchCountries.fulfilled, (state, action) => {
        console.log(action);
        state.status = "success";
        // When asyncThunk gets the data successfully it dispatches this action and the payload is the data that is received from the http server
        state.value = action.payload;
      })
      .addCase(fetchCountries.rejected, (state, action) => {
        console.log(action);
        state.status = "fail";
        state.error = action.error.message;
      });
  },
});

export default countriesSlice.reducer;
